/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2011-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'groovy'
    id 'idea'
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.bintray'
    id 'org.kordamp.gradle.coveralls'
    id 'org.openjfx.javafxplugin'
    id 'org.asciidoctor.jvm.convert'
    id 'org.jonnyzzz.java9c'
    id 'org.javamodularity.moduleplugin'
    id 'com.google.osdetector'
}

if (!project.hasProperty('bintrayUsername'))  project.ext.bintrayUsername  = ''
if (!project.hasProperty('bintrayApiKey'))    project.ext.bintrayApiKey    = ''
if (!project.hasProperty('sonatypeUsername')) project.ext.sonatypeUsername = ''
if (!project.hasProperty('sonatypePassword')) project.ext.sonatypePassword = ''

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name          = 'Groovyfx'
        vendor        = 'Groovyfx'
        description   = 'A library for writing JavaFX applications in the Groovy language'
        inceptionYear = '2011'
        tags          = ['Groovy', 'JavaFX', 'GroovyFX']

        links {
            website      = 'http://groovyfx.org'
            issueTracker = 'https://github.com/groovyfx-project/groovyfx/issues'
            scm          = 'https://github.com/groovyfx-project/groovyfx.git'
        }

        people {
            [
                JimClarke5 : 'Jim Clarke',
                deanriverson : 'Dean Iverson',
                russel : 'Russel Winder',
                aalmiray : 'Andres Almiray',
                Dierk : 'Dierk KÃ¶nig'
            ].each { devId, devName ->
                person {
                    id   = devId
                    name = devName
                    roles = ['developer']
                }
            }
        }

        implementation { enabled = false }

        credentials {
            sonatype {
                username = project.sonatypeUsername
                password = project.sonatypePassword
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    bintray {
        credentials {
            username = project.bintrayUsername
            password = project.bintrayApiKey
        }
        userOrg = 'groovyfx'
        name    = 'groovyfx'
        githubRepo = 'groovyfx-project/groovyfx'
    }

    docs {
        groovydoc {
            replaceJavadoc = true
            options {
                link 'http://junit.org/javadoc/latest/', 'org.junit.', 'junit.'
                link 'http://docs.oracle.com/javase/8/docs/api/', 'java.', 'org.xml.', 'javax.', 'org.w3c.'
                link 'http://docs.oracle.com/javase/8/javafx/api/', 'javafx.'
                link 'http://docs.groovy-lang.org/latest/html/api/', 'groovy.', 'org.codehaus.groovy'
            }
        }
    }

    coverage {
        jacoco {
            toolVersion = '0.8.6'
        }
    }
}

repositories {
    if (project.hasProperty('groovyfx_useMavenLocal') && Boolean.valueOf(project.groovyfx_useMavenLocal)) { mavenLocal() }
    jcenter()
}

configurations {
    jansi.extendsFrom(runtime)
}

javafx {
    modules = [
       'javafx.base',
       'javafx.graphics',
       'javafx.controls',
       'javafx.fxml',
       'javafx.swing',
       'javafx.web',
       'javafx.media'
    ]
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyfx_groovyVersion}"
    testCompile "junit:junit:${groovyfx_junitVersion}"
    jansi "org.fusesource.jansi:jansi:${groovyfx_jansiVersion}"
    testCompile("org.spockframework:spock-core:${groovyfx_spockVersion}") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

license {
     mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        gdsl   = 'SLASHSTAR_STYLE'
        dsld   = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }
    exclude '**/*.png'
    exclude '**/*.jpg'
}

idea {
    module {
        // excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
        excludeDirs += file('.settings/') // Eclipse settings directory.
        excludeDirs += file('bin') // Eclipse compilation directory.
        excludeDirs += file('out') // IDEA compilation directory.
        excludeDirs += file('build') // Gradle compilation directory.
    }
    project {
        jdkName '11'
        languageLevel '11'
        ipr {
            withXml { provider ->
                final node = provider.asNode()
                final component = provider.asNode().component
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }.mapping[0].'@vcs' = 'Git'
                final gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
            }
        }
    }
}

asciidoctor {
    attributes toc: 'left',
        doctype: 'book',
        icons: 'font',
        encoding: 'utf-8',
        sectlink: true,
        sectanchors: true,
        numbered: true,
        linkattrs: true,
        imagesdir: 'images',
        stylesheet: 'css/style.css',
        'source-highlighter': 'coderay',
        'groovyfx-version': project.version,
        'groovy-version': project.groovyfx_groovyVersion
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'groovyfx.version': project.version
        ])
    }
}

// ------------- compiling demo source ---------------

sourceSets {
    demo {
        compileClasspath += sourceSets.main.output + configurations.compile
        runtimeClasspath += sourceSets.main.output
        groovy {
            srcDir 'src/demo/groovy'
        }
        resources {
            srcDir 'src/demo/resources'
        }
    }
}

// ---------------- dynamic tasks to run demos ------------------

new File('src/demo/groovy/demo').eachFileMatch(~/.*Demo.groovy/) { file ->
    def demoClassName = file.name - '.groovy'
    task "run$demoClassName"(type: org.javamodularity.moduleplugin.tasks.ModularJavaExec) {
        group = "Demo"
        description = "Run the $demoClassName program"
        main = "groovyfx.demo/demo.$demoClassName"
    }
}

