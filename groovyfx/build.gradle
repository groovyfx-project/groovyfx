import java.lang.reflect.Method
import java.lang.reflect.Modifier

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

// check environment
javafxHome = System.env['JAVAFX_HOME']
if(!javafxHome) {
    println """Please set environment variable JAVAFX_HOME
to the directory that contains /rt/lib/jfxrt.jar
in version $requiredJavaFxVersion"""
    System.exit 1
}

buildscript {
    dependencies {
        classpath files("${System.env['JAVAFX_HOME']}/rt/lib/jfxrt.jar")
    }
}

actualJavaFXVersion = com.sun.javafx.runtime.VersionInfo.runtimeVersion
if (! actualJavaFXVersion.startsWith(requiredJavaFxVersion)) {
    println "Required JavaFX version is '$requiredJavaFxVersion' but actual version is '$actualJavaFXVersion'"
    System.exit(1)
}
// environment is ok

isRelease = !version.endsWith('SNAPSHOT')

// Define a source set for the non-standard src/demo directory
sourceSets {
    demo {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        groovy {
            srcDir = 'src/demo/groovy'
        }
        resources {
            srcDir = 'src/demo/resources'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    groovy      "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile     'asm:asm:3.2'
    compile     files("${javafxHome}/rt/lib/jfxrt.jar")
    testCompile 'junit:junit:4.10'
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: 'https://nexus.codehaus.org/content/repositories/snapshots/') {
            authentication()
        }
        //repository(url: "file:///Users/dean/temp/m2")
        pom.project {
            name        'GroovyFX'
            organization 'org.codehaus.groovy' // this should become: org.codehaus.groovyfx
            modules     'groovyfx'
            url         'http://groovy.codehaus.org/GroovyFX'
            description 'Groovy bindings for JavaFX 2.x'
            packaging   'jar'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                developerConnection 'scm:https://svn.codehaus.org/gmod/groovyfx/'
                connection 'scm:http://svn.codehaus.org/gmod/groovyfx/'
                tag 'trunk'
                url 'http://fisheye.codehaus.org/browse/gmod/groovyfx/'
            }
            developers {
                developer { name 'Jim Clarke' }
                developer { name 'Dean Iverson' }
                developer { name 'Dierk Koenig' }
            }
        }
    }
}

// Add a dynamic task to run each of the demos in src/demo/groovy
new File('src/demo/groovy').eachFileMatch(~/.*Demo.groovy/) { file ->
    def taskName = file.name - '.groovy'
    task "$taskName"(type: JavaExec) {
        group = "Demo"
        description = "Run the $taskName program"
        main = taskName
        classpath sourceSets.main.runtimeClasspath + sourceSets.demo.runtimeClasspath
    }
}

task wrap(type:Wrapper, description:"create a gradlew") {
    gradleVersion = '1.0-milestone-6'
}

// ---------------- generating the documentation ------------------

apply {
    from 'buildSrc/scripts/docsDependencies.gradle'
    from 'buildSrc/scripts/docs.gradle'
}

def titleForDocumentation = archivesBaseName + ' ' + version
def copyrightString = 'Copyright &#169; 2012 The GroovyFX team. All Rights Reserved.'
def packageTitle = group

javadoc {
    //options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    options.footer(copyrightString)

    doFirst {
        javadoc.title = titleForDocumentation
        javadoc.options.docTitle = javadoc.title
    }
}

groovydoc {
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
    include 'groovyx/**'
    //overview = new File('overview.html')
}

task documentation(dependsOn: ['javadoc', 'groovydoc', 'buildGuide', 'pdfGuide'],
                   description: 'Create the API documentation and guide.')

// experimental

def findWebProperties(String accessor) {
    javafx.scene.web.WebView."$accessor"
        .findAll{ Method m -> Modifier.isPublic(m.modifiers) }
        .name.findAll { it.startsWith('set') }
        .findAll { ! (it =~ /(i|I)mpl_/) } // I guess these should be removed
        .collect { it[3].toLowerCase() + it[4..-1] }
}

task webViewPropDoc(description: 'merge JavaFX infos with GroovyFX infos') {
    def allProps = findWebProperties('methods').sort()
    def addedWebProps = ['location']
    def selfProps = (findWebProperties('declaredMethods') + addedWebProps).sort()
    File file = new File('grails-doc/src/ref/webView/Properties.gdoc')

    if (!file.parentFile.exists())
        file.parentFile.mkdirs()

    file.withWriter('utf-8') { out ->
        //out << "{hidden}\nauto-generated: do not edit!\n{hidden}" // looks like the hidden macro is not in place
        out << "\nh1. Properties of webView "
        out << "\nh2. Self declared properties"
        for (prop in selfProps) { out << "\n* $prop" }
        out << "\nh2. Inherited properties "
        for (prop in allProps-selfProps) { out << "\n* $prop" }
    }
}
buildGuide.dependsOn webViewPropDoc
