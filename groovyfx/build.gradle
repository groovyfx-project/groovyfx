apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

// Set Maven coordinates
group = 'org.codehaus.groovy.modules.groovyfx'
archivesBaseName = "groovyfx"
version = '0.1-SNAPSHOT'

// Read environment and set properties
javafxHome = System.env['JAVAFX_HOME']
if(!javafxHome) {
    "Please set environment variable JAVAFX_HOME to the directory that contains /rt/lib/jfxrt.jar"
    System.exit 1
}

isRelease = !version.endsWith('SNAPSHOT')

// Define a source set for the non-standard src/demo directory
sourceSets {
    demo {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        groovy {
            srcDir = 'src/demo/groovy'
        }
        resources {
            srcDir = 'src/demo/resources'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    groovy      'org.codehaus.groovy:groovy-all:1.8.4'
    compile     'asm:asm:3.2'
    compile     files("${javafxHome}/rt/lib/jfxrt.jar")
    testCompile 'junit:junit:4.10'
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: 'https://nexus.codehaus.org/content/repositories/snapshots/') {
            authentication()
        }
        //repository(url: "file:///Users/dean/temp/m2")
        pom.project {
            name 'GroovyFX'
            url 'http://groovy.codehaus.org/GroovyFX'
            description 'Groovy bindings for JavaFX 2.x'
            packaging 'jar'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                developerConnection 'scm:https://svn.codehaus.org/gmod/groovyfx/'
                connection 'scm:http://svn.codehaus.org/gmod/groovyfx/'
                tag 'trunk'
                url 'http://fisheye.codehaus.org/browse/gmod/groovyfx/'
            }
            developers {
                developer { name 'Jim Clarke' }
                developer { name 'Dean Iverson' }
            }
        }
    }
}

// Add a dynamic task to run each of the demos in src/demo/groovy
new File('src/demo/groovy').eachFileMatch(~/.*Demo.groovy/) { file ->
    def taskName = file.name - '.groovy'
    task "$taskName"(type: JavaExec) {
        group = "Demo"
        description = "Run the $taskName program"
        main = taskName
        classpath sourceSets.main.runtimeClasspath + sourceSets.demo.runtimeClasspath
    }
}

